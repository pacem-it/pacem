@import "../theme-dark";
@import "shared";
@import "../ui/shared";

@keyframes pacem-rotate-anim {
    0% {
        transform: rotate(0);
    }

    100% {
        transform: rotate(360deg);
    }
}

@keyframes pacem-autocomplete-anim {
    0% {
        opacity: 0;
        transform: translateY(@grid_spacing);
    }

    100% {
        opacity: 1;
        transform: translateY(0);
    }
}

@_left: @grid_spacing * 5 / 6;
@_h: @_left;

@keyframes pacem-label-anim {
    0% {
        //transform: translateY(@_h) scale(1.125) translateX(0) translateZ(0);
    }

    100% {
        //transform: translateY(0) scale(1);
    }
}

@keyframes pacem-label-before-anim {
    0% {
        transform: rotate(-180deg);
    }

    100% {
        transform: rotate(0);
    }
}

@keyframes pacem-label-before-anim-inline {
    0% {
        transform: rotate(-90deg);
    }

    100% {
        transform: rotate(0);
    }
}

@keyframes pacem-input-container-anim {
    0% {
        // DO NOT ANIMATE this, FireFox and IE will get the correct positioning of the auto-complete component broken.
        //transform: /*translateX(0) translateY(0) translateZ(0)*/ scale(.1);
        //opacity: .0; // opacity animation is EVIL!
    }

    100% {
        //transform: /*translateX(0)*/ scale(1);
        //opacity: 1;
    }
}

@{P}-form-field {
    display: flex;
    align-content: stretch;
    align-items: stretch;

    > @{P}-form {
        flex: 1 1 auto;
    }
}

@_input_container_pad_top: @grid_spacing/ 3;

.@{PCSS}-field {
    margin-bottom: @grid_spacing / 3;
    padding: @grid_spacing/3 0 @_h 0;
    z-index: 0;
    border-radius: @border_radius;
    transition: background linear .3s, border linear .3s;

    @_thumb_border: @grid_spacing/12; // 2px
    > label.@{PCSS}-label {
        position: relative;
        //height: @_h;
        //line-height: @_h;
        padding-left: @_h;
        display: block;
        align-items: center;
        color: @color_field_label;
        .FontMain(1.05);
        animation: pacem-label-anim .25s ease-in-out both;

        // field appearance borrowed from -inline:
        min-height: @field_height;

        & when (@border_field_underline = false) {
            margin-top: @_input_container_pad_top + @field_readonly_top + @border_field_size;
        }

        & when (@border_field_underline = true) {
            margin-top: @_input_container_pad_top + @field_readonly_top;
        }
    }

    .@{PCSS}-input-container {
        padding: @_input_container_pad_top @_left 0 @_left;
        animation: pacem-input-container-anim .3s ease-in .2s both;
    }

    .@{PCSS}-validators {
        list-style-type: none;
        color: @color_danger;
        margin-top: @border_field_size;

        > * {
            // display: list-item;
            //min-height: @grid_spacing;
            //line-height: @grid_spacing;
        }
    }

    img.@{PCSS}-readonly {
        padding: 0;
        border: @_thumb_border solid @color_default;
        margin: @grid_spacing/3 0 @grid_spacing/3 @_left;
    }

    .@{PCSS}-viewfinder,
    .@{PCSS}-input {
        transition: border-color .22s linear;
    }

    &.@{PCSS}-invalid {
        .@{PCSS}-input-container {

            .@{PCSS}-viewfinder,
            .@{PCSS}-input {
                border-color: fade(@color_danger, 20);
            }
        }

        &.@{PCSS}-dirty {
            .@{PCSS}-viewfinder,
            .@{PCSS}-input {
                border-color: @color_danger;
            }
        }
    }

    &.@{PCSS}-has-value {

        &.@{PCSS}-valid {

            &.@{PCSS}-dirty {
                .@{PCSS}-input-container {

                    .@{PCSS}-viewfinder,
                    .@{PCSS}-input {
                        border-color: fade( @color_success, 100);
                    }
                }
            }

            &.@{PCSS}-pristine {
                .@{PCSS}-viewfinder,
                .@{PCSS}-input {
                    border-color: fade(fade( @color_success, 100), 40);
                }
            }
        }
    }
}

.@{PCSS}-field when (@border_field_underline = false) {
    border: @border_field_size solid transparent;
}

.@{PCSS}-field when (@border_field_underline = true) {
    border-bottom: @border_field_size solid transparent;
}

.FieldInline() {
    display: flex;
    flex-flow: row nowrap;
    align-items: flex-start;
    align-content: stretch;

    > label.@{PCSS}-label {
        flex: 0 0 @grid_spacing * 5 - @grid_spacing;
    }

    > .@{PCSS}-input-container {
        flex: 1 1 auto;
    }

    &.@{PCSS}-editable {

        > label.@{PCSS}-label {

            &::before {
                .Icon('keyboard_arrow_right', @grid_spacing / 1.5);
                top: 3px;
                left: 3px;
                animation: pacem-label-before-anim-inline .3s ease-in .5s both;
            }
        }
    }

    &.@{PCSS}-readonly {
        > label.@{PCSS}-label {
            flex-basis: @grid_spacing * 5;
            margin-left: 0;
        }

        > .@{PCSS}-input-container {
            & when (@border_field_underline = false) {
                margin-top: @field_readonly_top + @border_field_size;
            }

            & when (@border_field_underline = true) {
                margin-top: @field_readonly_top;
            }
        }
    }
}

@{P}-form-field.field-inline > .@{PCSS}-field {
    .FieldInline();
}

.@{PCSS}-field.@{PCSS}-editable {

    &.@{PCSS}-fetching {
        label.@{PCSS}-label::before {
            .Icon('refresh', @grid_spacing / 1.5);
            animation: pacem-rotate-anim .67s linear infinite;
        }
    }

    &:not(.@{PCSS}-has-value) {

        select.@{PCSS}-select:not(:focus) /*,
        input::-webkit-datetime-edit */ {
            .Watermark();
        }
    }

    div[contenteditable][pacem]:focus,
    .@{PCSS}-input:focus,
    .@{PCSS}-input:focus + label,
    select.@{PCSS}-select:focus /*,
        input::-webkit-datetime-edit */ {
        color: @color_input_fore_focus;
    }
}

.pacem-animations {
    .@{PCSS}-field {
        div[contenteditable][pacem]:focus,
        .@{PCSS}-input:focus,
        .@{PCSS}-input:focus + label,
        select.@{PCSS}-select:focus /*,
        input::-webkit-datetime-edit */ {
            transition: color .2s;
        }
    }
}

.@{PCSS}-input-container .@{PCSS}-latlng {
    .@{PCSS}-latlng-fields[hidden] {
        display: none !important;
    }
}
// EDITABLE VS READONLY
.@{PCSS}-field.@{PCSS}-editable {
    background-color: @color_field_back;
    border-color: transparent;

    > label.@{PCSS}-label {
        margin-left: @_h;

        &:before {
            .Icon('keyboard_arrow_down', @grid_spacing / 1.5);
            position: absolute;
            top: @_h * .1;
            left: 0;
            display: block;
            width: @_h * .8;
            height: @_h * .8;
            animation: pacem-label-before-anim .3s ease-in .5s both;
        }
    }
}
/*@{P}-form-field.field-inline > .@{PCSS}-field.@{PCSS}-editable {

    > label.@{PCSS}-label {
    }
}*/
// #region screen sizes
@media (max-width: @threshold_sm - 1) {

    @{P}-form-field.field-xs-inline > .@{PCSS}-field {
        .FieldInline();
    }
}

@media (min-width: @threshold_sm) {

    @{P}-form-field.field-sm-inline > .@{PCSS}-field {
        .FieldInline();
    }
}

@media (min-width: @threshold_md) {

    @{P}-form-field.field-md-inline > .@{PCSS}-field {
        .FieldInline();
    }
}

@media (min-width: @threshold_lg) {

    @{P}-form-field.field-lg-inline > .@{PCSS}-field {
        .FieldInline();
    }
}

@media (min-width: @threshold_xl) {

    @{P}-form-field.field-xl-inline > .@{PCSS}-field {
        .FieldInline();
    }
}

@media (min-width: @threshold_hd) {

    @{P}-form-field.field-hd-inline > .@{PCSS}-field {
        .FieldInline();
    }
}

@media (min-width: @threshold_uhd) {

    @{P}-form-field.field-uhd-inline > .@{PCSS}-field {
        .FieldInline();
    }
}

@media (min-width: @threshold_4k) {

    @{P}-form-field.field-4k-inline > .@{PCSS}-field {
        .FieldInline();
    }
}

@media (orientation: landscape) {

    @{P}-form-field.field-h-inline > .@{PCSS}-field {
        .FieldInline();
    }
}
// #endregion
// label tooltip
.@{PCSS}-field {
    &.@{PCSS}-editable {
        > label.@{PCSS}-label {

            &.@{PCSS}-tooltip::before {
                content: 'info' !important;
                animation: none !important;
            }

            + .@{PCSS}-balloon {
                margin-left: @_left * .7;
            }

            &.@{PCSS}-required:after {
                content: '*';
                .FontTech(1.1);
            }
        }
    }
}

.@{PCSS}-field.@{PCSS}-editable when (@shadows = true) {
    box-shadow: 0 2px @grid_spacing / 3 rgba(0,0,0,0.25);
}

.@{PCSS}-field.@{PCSS}-editable when (@shadows = false) {
    box-shadow: 0 2px @grid_spacing / 8 rgba(0,0,0,0.05);
}

.@{PCSS}-field.@{PCSS}-readonly {
    background-color: transparent;
    box-shadow: none;
    border-color: fade(@color_default, 5);
}
// FieldSet
.@{PCSS}-fieldset {
    .HorizontalItemSet(field);

    .@{PCSS}-fieldset-left, .@{PCSS}-fieldset-center, .@{PCSS}-fieldset-right, .@{PCSS}-fieldset-auto,
    .fieldset-left, .fieldset-center, .fieldset-right, .fieldset-auto {
        background-color: @color_input_back;
        border-radius: @border_radius;

        .@{PCSS}-viewfinder,
        .@{PCSS}-input {
            background: none;
            border-radius: 0;
        }

        > * {

            &:first-child when (@border_radius > 0) {
                .@{PCSS}-viewfinder, .@{PCSS}-input {
                    border-top-left-radius: @border_radius;
                    border-bottom-left-radius: @border_radius;
                }
            }

            &:last-child when (@border_radius > 0) {
                .@{PCSS}-viewfinder, .@{PCSS}-input {
                    border-top-right-radius: @border_radius;
                    border-bottom-right-radius: @border_radius;
                }
            }

            &:not(:last-child):not(.fieldset-last)::after {
                // content: '|';
            }
        }
    }
}

.@{PCSS}-fieldgroup,
.input-group {
    display: grid;
    grid-template-columns: auto 1fr auto;
    grid-template-areas: "prepend main append";

    > * {
        min-height: @field_height;
        grid-area: main;

        &.fieldgroup-prepend,
        &.input-group-prepend,
        &.fieldgroup-append,
        &.input-group-append {
            .FormFieldItemBorder();
            background-color: @color_input_back;
            color: @color_field_fore;
            min-width: @border_radius;

            .@{PCSS}-icon {
                font-size: @grid_spacing;
                height: @field_height;
                line-height: @field_height;
            }
        }

        &.fieldgroup-prepend,
        &.input-group-prepend {
            grid-area: prepend;
            border-right: none;
            border-top-left-radius: @border_radius;
            border-bottom-left-radius: @border_radius;
        }

        &.fieldgroup-append,
        &.input-group-append {
            grid-area: append;
            border-left: none;
            border-top-right-radius: @border_radius;
            border-bottom-right-radius: @border_radius;
        }

        .@{PCSS}-viewfinder, .@{PCSS}-input {
            border-radius: 0 !important;
            border-left: none !important;
            border-right: none !important;
        }
    }

    .@{PCSS}-focus ~ .fieldgroup-prepend,
    .@{PCSS}-focus ~ .input-group-prepend {
        color: @color_input_fore_focus;
        border-color: fade(@color_default, 40);
    }

    .@{PCSS}-focus ~ .fieldgroup-append,
    .@{PCSS}-focus ~ .input-group-append {
        color: @color_input_fore_focus;
        border-color: fade(@color_default, 40);
    }
}

// reset bg for groups nested inside sets
.@{PCSS}-fieldset {

    .@{PCSS}-fieldgroup,
    input-group {

        .fieldgroup-prepend,
        .input-group-prepend,
        .fieldgroup-append,
        .input-group-append {
            background: none;
        }

        &:not(:first-child) {

            .fieldgroup-prepend,
            .input-group-prepend {
                border-radius: 0;
                border-left: none;
            }
        }

        &:not(:last-child) {

            .fieldgroup-append,
            .input-group-append {
                border-radius: 0;
                border-right: none;
            }
        }
    }
}

// ANIMATIONS
body.@{PCSS}-animations {
    @{P}-form-field > .@{PCSS}-field {

        > label.@{PCSS}-label {
            transition: margin .2s @easing_in_out_sine, flex .2s @easing_in_out_sine;
        }
    }
}

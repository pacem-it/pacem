@import "../../shared";
@import "../theme-dark";

@{P}-pie-chart, @{P}-pie-slice {
    .Inert();
}

@keyframes pie-anim {
    0% {
        opacity: 0;
        transform: rotate(-90deg);
    }

    100% {
        opacity: 1;
        transform: rotate(0);
    }
}

svg.@{PCSS}-pie-chart {
    display: block;

    defs mask circle {
        transition: r @easing_out_sine .125s;
    }

    g {
        pointer-events: none;

        path {
            pointer-events: fill;
        }

        transform-origin: 50%;
    }
}

.@{PCSS}-chart-area {
    > svg.@{PCSS}-pie-chart {
        display: none;
        max-height: 30vh;

        g.chart-series {

            path {
                stroke: none;
                opacity: .8;
                fill: @color_default;

                &:hover {
                    opacity: 1;
                }
            }

            &.series-light {
                path {
                    opacity: .5;

                    &:hover {
                        opacity: .8;
                    }
                }
            }
        }
    }

    &.chart-has-data {
        > svg.@{PCSS}-pie-chart {
            display: block;
        }
    }

    &.chart-error,
    &.chart-disabled,
    &.chart-danger,
    &.chart-warning,
    &.chart-success,
    &.chart-primary,
    &.chart-accent,
    &.chart-default {
        > svg.@{PCSS}-pie-chart g.chart-series {
            .PieSliceGradient(20, 1);
        }
    }

    &.chart-default {
        .PieSliceGradient(@color_default);
    }

    &.chart-accent {
        .PieSliceGradient(@color_accent);
    }

    &.chart-primary {
        .PieSliceGradient(@color_primary);
    }

    &.chart-success {
        .PieSliceGradient(@color_success);
    }

    &.chart-warning {
        .PieSliceGradient(@color_warning);
    }

    &.chart-danger {
        .PieSliceGradient(@color_danger);
    }

    &.chart-error {
        .PieSliceGradient(@color_error);
    }

    &.chart-disabled {
        .PieSliceGradient(@color_disabled);
    }
}

.@{PCSS}-chart-area.chart-has-data {

    &.chart-small > svg.@{PCSS}-pie-chart {
        height: @grid_spacing * 8;
    }

    &.chart-smaller > svg.@{PCSS}-pie-chart {
        height: @grid_spacing * 5;
    }
}

.PieSliceGradient(@count, @index) when (@index < @count + 1) {
    &:nth-child(@{index}) > path {
        opacity: .8 - (@index - 1) * ((.9-.1) / @count);
    }

    .PieSliceGradient(@count, @index + 1);
}

.PieSliceGradient(@clr) {
    > svg.@{PCSS}-pie-chart {

        g.chart-series > path {
            fill: @clr;

            &:hover {
                opacity: 1;
            }
        }
    }
}

.PieSlice (@count, @index) when (@index > 0) {
    &:nth-child(@{index}) {
        animation-delay: 1.25s * @index / @count;
    }
    // next iteration
    .PieSlice(@count, @index - 1);
}

.PieSlice (@count) {
    .PieSlice(@count, @count);
}

.PieChartSeries(@clr) {
    path {
        fill: @clr;
    }
}

.@{PCSS}-animations {

    svg.@{PCSS}-pie-chart {
        //.Animatable(pop-anim, .4s, @easing_out_back);
        g.@{PCSS}-pie-slice {
            .Animatable(pie-anim, 0s, @easing_out_sine);
            .PieSlice(20);

            path {
                transition: transform @easing_in_out_sine .2s;
            }
        }

        g.chart-series {

            &.series-default {
                .PieChartSeries(@color_default);
            }

            &.series-accent {
                .PieChartSeries(@color_accent);
            }

            &.series-primary {
                .PieChartSeries(@color_primary);
            }

            &.series-success {
                .PieChartSeries(@color_success);
            }

            &.series-warning {
                .PieChartSeries(@color_warning);
            }

            &.series-danger {
                .PieChartSeries(@color_danger);
            }

            &.series-error {
                .PieChartSeries(@color_error);
            }

            &.series-disabled {
                .PieChartSeries(@color_disabled);
            }
        }
    }

    svg.@{PCSS}-pie-chart when (@shadows = true) {
        filter: drop-shadow(0 @grid_spacing/6 @grid_spacing/12 rgba(0,0,0,0.5) );
    }
}

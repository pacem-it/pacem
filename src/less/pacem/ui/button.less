@import "../../shared";
@import "../theme-dark";
@import "shared";

@_side_padding: @grid_spacing / 2;
@_margin: @grid_spacing/3;
@_width: 2 * (@grid_cell + @_side_padding);
@_height: @grid_spacing * 1.5;
@_border: 1px;

.pacem-button.button,
pacem-button.button {
    @_brd: @_border;
    @_h: @_height;
    height: @_h - 2 * @_brd;
    line-height: @_h - 2 * @_brd;
    padding: 0 @grid_spacing/1.5;
    //min-width: @_width;
    background-color: @color_button_back;
    box-sizing: border-box;
    cursor: pointer;
    border: @_brd solid transparent;
    //margin: 0 @_margin @_margin 0;
    transition: all .1s linear;
    //color: @color_light;
    border-radius: @border_radius;

    &.button-size {
        padding: 0 @grid_spacing/2;
        min-width: @_width;
    }
}

.ButtonShadows() {
    box-shadow: 0 2px @grid_spacing / 3 rgba(0,0,0,0.5);
}

.ButtonGradients() {
    .GradientBorderVertical(1, 0, 100%, @color_button_border_light, @color_button_border_dark);
}

.ButtonNoGradients() {
    border-top-color: @color_button_border_light;
    border-bottom-color: @color_button_border;
    border-right-color: @color_button_border;
    border-left-color: @color_button_border;
}

.pacem-button.button when (@shadows = true) {
    .ButtonShadows();
}

pacem-button.button when (@shadows = true) {
    .ButtonShadows();
}

.pacem-button.button when (@gradients = true) {
    .ButtonGradients();
}

pacem-button.button when (@gradients = true) {
    .ButtonGradients();
}

pacem-button.button when (@gradients = false) {
    .ButtonNoGradients();
}

pacem-button.button when (@gradients = false) {
    .ButtonNoGradients();
}

.pacem-button,
a.pacem-button,
pacem-button {
    position: relative;
    cursor: pointer;
    display: inline-block;
    vertical-align: middle;
    background-color: @color_button_back;
    margin: 0 @_margin @_margin 0;
    color: @color_button_fore;
    user-select: none;

    &:focus when (@glows = true) {
        text-shadow: 0 0 8px @color_button_fore;
    }

    &:hover when (@glows = true) {
        text-shadow: 0 0 8px @color_button_fore;
    }

    @_darken_perc: @button_hover_percentage;

    &:focus when (@dark_theme = false) {
        background-color: darken(@color_button_back, @_darken_perc);
    }

    &:hover when (@dark_theme = false) {
        background-color: darken(@color_button_back, @_darken_perc);
    }

    &:focus when (@dark_theme = true) {
        background-color: lighten(@color_button_back, @_darken_perc);
    }

    &:hover when (@dark_theme = true) {
        background-color: lighten(@color_button_back, @_darken_perc);
    }

    &.accent,
    &.button-accent {
        background: @color_accent;
        color: @color_accent_inv;

        &:focus,
        &:hover {
            background: darken(@color_accent, @_darken_perc);
            color: @color_accent_inv;
        }

        &:focus when (@glows = true) {
            text-shadow: 0 0 8px @color_accent_inv;
        }

        &:hover when (@glows = true) {
            text-shadow: 0 0 8px @color_accent_inv;
        }
    }

    &.primary,
    &.button-primary {
        background: @color_primary;
        color: @color_primary_inv;

        &:focus,
        &:hover {
            color: @color_primary_inv;
            background: darken(@color_primary, @_darken_perc);
        }

        &:focus when (@glows = true) {
            text-shadow: 0 0 8px @color_primary_inv;
        }

        &:hover when (@glows = true) {
            text-shadow: 0 0 8px @color_primary_inv;
        }
    }

    &.danger,
    &.button-danger {
        background: @color_danger;
        color: @color_danger_inv;

        &:focus,
        &:hover {
            color: @color_danger_inv;
            background: darken(@color_danger, @_darken_perc);
        }

        &:focus when (@glows = true) {
            text-shadow: 0 0 8px @color_danger_inv;
        }

        &:hover when (@glows = true) {
            text-shadow: 0 0 8px @color_danger_inv;
        }
    }

    &.success,
    &.button-success {
        background: @color_success;
        color: @color_success_inv;

        &:focus,
        &:hover {
            color: @color_success_inv;
            background: darken(@color_success, @_darken_perc);
        }

        &:focus when (@glows = true) {
            text-shadow: 0 0 8px @color_success_inv;
        }

        &:hover when (@glows = true) {
            text-shadow: 0 0 8px @color_success_inv;
        }
    }

    &.warning,
    &.button-warning {
        background: @color_warning;
        color: @color_warning_inv;

        &:focus,
        &:hover {
            color: @color_warning_inv;
            background: darken(@color_warning, @_darken_perc);
        }

        &:focus when (@glows = true) {
            text-shadow: 0 0 8px @color_warning_inv;
        }

        &:hover when (@glows = true) {
            text-shadow: 0 0 8px @color_warning_inv;
        }
    }

    &.exhalt,
    &.button-exhalt {
        background: @color_highlight;
        color: @color_highlight_fore;

        &:focus,
        &:hover {
            color: @color_highlight_fore;
            background: darken(@color_highlight, @_darken_perc);
        }

        &:focus when (@glows = true) {
            text-shadow: 0 0 8px @color_highlight_fore;
        }

        &:hover when (@glows = true) {
            text-shadow: 0 0 8px @color_highlight_fore;
        }
    }

    &.flat,
    &.button-flat {
        background: transparent;
    }

    &.rise,
    &.button-rise {
        /*box-shadow: none;
        border-image: none;*/
        box-shadow: 0 2px @grid_spacing / 3 rgba(0,0,0,0.5);
        margin: 0 @_margin @_margin 0;
    }

    &.circular,
    &.button-circular {
        border-radius: 50%;
        width: 2 *@grid_spacing;
        height: 2 * @grid_spacing;
        font-size: 0;

        &:before {
            top: 50%;
            left: 50%;
            margin-top: -@grid_spacing/2;
            margin-left: -@grid_spacing/2;
        }
    }

    &.add:before {
        .Icon('add');
    }

    &.remove:before {
        .Icon('remove');
    }

    &.edit:before {
        .Icon('edit');
    }

    &.save:before {
        .Icon('save');
    }

    &.check:before {
        .Icon('check');
    }

    &.clear:before {
        .Icon('clear');
    }

    &.delete:before {
        .Icon('delete');
    }

    &.copy:before {
        .Icon('file_copy');
    }

    &.toggle {

        &:before {
            transition: transform @easing_in_out_sine .333s;
            overflow: hidden;
        }

        &.fullscreen:before {
            .Icon('fullscreen');
        }

        &.fullscreen-exit:before {
            .Icon('fullscreen_exit');
        }

        &.expand:before {
            .Icon('expand_more');
            transform: rotate(0);
        }

        &.collapse:before {
            .Icon('expand_more');
            transform: rotate(-180deg);
        }
    }
}

pacem-button, .pacem-button {
    /*&.pacem-focus when (@gradients = true) {
        .GradientBorderVertical(1, 0, 100%, fade(@color_button_border_light, 20), fade(@color_button_border, 0));
    }*/
    &:focus when (@gradients = true) {
        .GradientBorderVertical(1, 0, 100%, fade(@color_button_border_light, 20), fade(@color_button_border, 0));
    }
    /*&.pacem-focus when (@gradients = false) {
        border-bottom-color: @color_button_border_dark;
    }*/
    &:focus when (@gradients = false) {
        border-bottom-color: @color_button_border_dark;
    }

    &.pacem-active {
        //border-image: none;
        transform: translateY(@_border);
        box-shadow: none;
    }

    &.pacem-active when (@gradients = true) {
        .GradientBorderVertical(1, 0, 100%, fade(@color_button_border_dark, 10), fade(@color_button_border_light, 10));
    }

    &.pacem-active when (@gradients = false) {
        border-top-color: @color_button_border;
        border-bottom-color: @color_button_border_light;
    }
}

.ButtonText() {
    cursor: pointer;
    // picked from below
    font-family: @button_fontfamily;
    font-size: @button_fontsize;
    text-align: center;
}

//:host

.pacem-button,
pacem-button {
    .ButtonText();
}

pacem-button when (@uppercase_buttons = true) {
    text-transform: uppercase;
}

.pacem-button when (@uppercase_buttons = true) {
    text-transform: uppercase;
}

//:host([disabled]),
.pacem-button.pacem-disabled,
.pacem-button[disabled],
pacem-button.pacem-disabled,
.pacem-button.pacem-disabled:hover,
.pacem-button[disabled]:hover,
pacem-button.pacem-disabled:hover {
    cursor: default;
    color: fade(@color_button_fore, 30);
    text-shadow: none;
}

.pacem-button,
pacem-button,
.pacem-button:hover,
pacem-button:hover {
    color: inherit;

    &.pacem-disabled {
        background-color: @color_button_back;
        cursor: default;
    }

    &.pacem-disabled when (@gradients = true) {
        .GradientBorderVertical(1, 0, 50%, fade(@color_button_border_light, 10), fade(@color_button_border, 0));
        //border-color: transparent;
    }

    &.pacem-disabled when (@shadows = true) {
        box-shadow: 0 2px 2px rgba(0,0,0,0.1);
    }

    &.pacem-disabled when (@gradients = false) {
        //border-color: #f0f0f0;
        border-color: transparent;
    }
}

/* #endregion */

pacem-buttonset {
    display: block;
    border: 4px solid transparent;
    transition: border .25s linear;
    position: relative;

    &:focus {
        border-color: @color_suggest_border;
    }
    /*&:focus::before{
        .Icon('keyboard_arrow_down');
        color: @color_primary;
        top: -@grid_spacing;
        left: 50%;
        margin-left: -@grid_spacing/2;
        animation: shooting-star .4s linear both;
        //z-index: 2;
    }*/
}

.pacem-buttonset {
    .HorizontalItemSet(button);
    padding: @grid_spacing/2 0 0 0;

    &.buttons when (@shadows = true) {
        .pacem-buttonset-left, .buttonset-left,
        .pacem-buttonset-center, .buttonset-center,
        .pacem-buttonset-right, .buttonset-right {
            .ButtonShadows();
        }
    }

    pacem-button,
    .pacem-button {
        .HorizontalItem(button);
        margin: 0;
        box-shadow: none;
    }
}

pacem-button.dropdown-toggle {
    padding-right: 1.5 * @grid_spacing;
    margin-bottom: 0;
    position: relative;

    &::after {
        .Icon('arrow_drop_down');
        right: .25 * @grid_spacing;
        //top: .5 * (@_height - @grid_spacing) - @_border;
        top: 50%;
        margin-top: -@grid_spacing/2;
        transition: transform .25s @easing_in_out_sine;
    }

    &.dropdown-open::after {
        transform: rotate(-180deg);
    }
}

pacem-button.dropdown-item {
    display: block;
    margin: 0;
    height: @_height;
    line-height: @_height;
    border-top: 1px solid @color_suggest_border_light;
    border-bottom: 1px solid @color_suggest_border_dark;

    &.selected {
        background-color: @color_accent;
        color: @color_accent_inv;
    }

    &:hover,
    &:focus {
        background-color: @color_suggest_focus_back;
        color: @color_suggest_focus_fore;
    }
}
